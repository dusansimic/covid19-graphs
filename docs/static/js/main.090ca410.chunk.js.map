{"version":3,"sources":["common.js","components/CountryList.js","components/NumberStatsBar.js","components/Chart.js","Dashboard.js","About.js","App.js","serviceWorker.js","index.js"],"names":["getDataFromDate","data","date","country","i","mapped","filter","row","map","slice","num","parseInt","zip","day","sum","getDataFromCountry","CountryList","props","useState","ready","setReady","countries","setCountries","useEffect","InputGroup","style","margin","Prepend","Text","role","aria-label","FormControl","placeholder","onChange","event","input","target","value","toLowerCase","startsWith","ListGroup","index","Item","action","href","key","NumberStatsBar","Row","Col","Card","Body","confirmed","active","deaths","recovered","Chart","Dashboard","confirmedData","setConfirmedData","deathsData","setDeathsData","recoveredData","setRecoveredData","setDate","setCountry","query","URLSearchParams","useLocation","search","a","ky","get","text","Papa","parse","dayjs","Date","subtract","format","getData","isEmpty","Spinner","animation","variant","display","position","zIndex","top","left","marginTop","marginLeft","Container","fluid","lg","uniq","sort","Navbar","className","Brand","Nav","Link","result","datasets","label","backgroundColor","borderColor","fill","labels","unshift","confirmedDataFromDate","deathsDataFromDate","recoveredDataFromDate","parseData","About","fontSize","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.090ca410.chunk.js","sourcesContent":["import {zip, sum, uniq} from 'lodash';\n\nexport const getDataFromCountry = (data, country) => {\n\tconst mapped = data.filter(row => row[1] === country).map(row => row.slice(4).map(num => parseInt(num)));\n\treturn zip(...mapped).map(day => sum(day));\n};\n\nexport const getDataFromDate = (data, date, country) => {\n\tlet i = 3;\n\twhile (data[0][++i] !== date);\n\n\treturn getDataFromCountry(data, country)[i - 4];\n}\n\nexport const getCountries = data => uniq(data.slice(1).map(row => row[1])).sort();\n","import React, {useState, useEffect} from 'react';\nimport {InputGroup, ListGroup, FormControl} from 'react-bootstrap';\n\nexport default function CountryList(props) {\n\tconst [ready, setReady] = useState();\n\tconst [countries, setCountries] = useState();\n\n\tconst handleInputChange = (event) => {\n\t\tconst input = event.target.value;\n\t\tsetCountries(props.countries.filter(country => country ? country.toLowerCase().startsWith(input.toLowerCase()) : false));\n\t};\n\n\tfunction prepareContries() {\n\t\tsetCountries(props.countries);\n\t\tsetReady(true);\n\t}\n\n\tuseEffect(() => {\n\t\tprepareContries();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\treturn !ready ? <></> : (\n\t\t<>\n\t\t\t<InputGroup style={{margin: '10px 0px'}}>\n\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t<InputGroup.Text>\n\t\t\t\t\t\t<span role=\"img\" aria-label=\"search\">ðŸ”Ž</span>\n\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t<FormControl placeholder='China' onChange={handleInputChange}></FormControl>\n\t\t\t</InputGroup>\n\t\t\t<ListGroup>\n\t\t\t\t{\n\t\t\t\t\tcountries.map((country, index) => {\n\t\t\t\t\t\treturn (<ListGroup.Item action href={`/?country=${country}`} key={index}>\n\t\t\t\t\t\t\t{country}\n\t\t\t\t\t\t</ListGroup.Item>);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ListGroup>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\nexport default function NumberStatsBar(props) {\n\treturn (\n\t\t<Row>\n\t\t\t<Col>\n\t\t\t\t<Card>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<p>Confirmed</p>\n\t\t\t\t\t\t<h3>{props.confirmed}</h3>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\n\t\t\t<Col>\n\t\t\t\t<Card>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<p>Active</p>\n\t\t\t\t\t\t<h3>{props.active}</h3>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\n\t\t\t<Col>\n\t\t\t\t<Card>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<p>Deaths</p>\n\t\t\t\t\t\t<h3>{props.deaths}</h3>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\n\t\t\t<Col>\n\t\t\t\t<Card>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<p>Recovered</p>\n\t\t\t\t\t\t<h3>{props.recovered}</h3>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t\t</Row>\n\t);\n};\n","import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nexport default function Chart(props) {\n\treturn (\n\t\t\t<Line data={props.data} />\n\t);\n};\n","import React, {useEffect, useState} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport {Container, Row, Col, Spinner, Navbar, Nav} from 'react-bootstrap';\nimport dayjs from 'dayjs';\nimport ky from 'ky';\nimport Papa from 'papaparse';\nimport {isEmpty} from 'lodash';\nimport {\n\tgetDataFromDate,\n\tgetCountries\n} from './common';\nimport CountryList from './components/CountryList';\nimport NumberStatsBar from './components/NumberStatsBar';\nimport Chart from './components/Chart';\n\nfunction useQuery() {\n\treturn new URLSearchParams(useLocation().search);\n}\n\nexport default function Dashboard() {\n\tconst [confirmedData, setConfirmedData] = useState();\n\tconst [deathsData, setDeathsData] = useState();\n\tconst [recoveredData, setRecoveredData] = useState();\n\tconst [date, setDate] = useState();\n\tconst [country, setCountry] = useState();\n\tconst query = useQuery();\n\n\tasync function getData() {\n\t\tconst confirmedData = await ky.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv').text();\n\t\tsetConfirmedData(Papa.parse(confirmedData).data);\n\n\t\tconst deathsData = await ky.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv').text();\n\t\tsetDeathsData(Papa.parse(deathsData).data);\n\n\t\tconst recoveredData = await ky.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv').text();\n\t\tsetRecoveredData(Papa.parse(recoveredData).data);\n\n\t\tawait setDate(dayjs(new Date()).subtract(1, 'day').format('M/D/YY'));\n\t\tawait setCountry(query.get('country') ?? 'China');\n\t}\n\n\tfunction parseData(confirmedData, deathsData, recoveredData, country) {\n\t\tconst result = {datasets: [\n\t\t\t{label: 'Confirmed', data: [], backgroundColor: '#fcba03', borderColor: '#fcba0355', fill: false},\n\t\t\t{label: 'Active', data: [], backgroundColor: '#3a33ff', borderColor: '#3a33ff55', fill: false},\n\t\t\t{label: 'Deaths', data: [], backgroundColor: '#ff0000', borderColor: '#ff000055', fill: false},\n\t\t\t{label: 'Recovered', data: [], backgroundColor: '#1cb800', borderColor: '#1cb80055', fill: false}\n\t\t], labels: []};\n\t\tlet date = dayjs(new Date()).subtract(1, 'day');\n\n\t\twhile (date.format('YYYY/MM/DD') !== '2020/01/31') {\n\t\t\tresult.labels.unshift(date.format('DD. MM.'));\n\t\t\tconst confirmedDataFromDate = getDataFromDate(confirmedData, date.format('M/D/YY'), country);\n\t\t\tconst deathsDataFromDate = getDataFromDate(deathsData, date.format('M/D/YY'), country);\n\t\t\tconst recoveredDataFromDate = getDataFromDate(recoveredData, date.format('M/D/YY'), country);\n\t\t\tresult.datasets[0].data.unshift(confirmedDataFromDate);\n\t\t\tresult.datasets[1].data.unshift(confirmedDataFromDate - deathsDataFromDate - recoveredDataFromDate);\n\t\t\tresult.datasets[2].data.unshift(deathsDataFromDate);\n\t\t\tresult.datasets[3].data.unshift(recoveredDataFromDate);\n\t\t\tdate = date.subtract(1, 'day');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tuseEffect(() => {\n\t\tgetData();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\treturn (isEmpty(confirmedData) || isEmpty(deathsData) || isEmpty(recoveredData) || !date || !country) ? <Spinner animation='border' variant='primary' style={{display: 'block', position: 'fixed', zIndex: '1031', top: '50%', left: '50%', marginTop: '-35px', marginLeft: '-35px'}}/> : (\n\t\t<Container fluid>\n\t\t\t<Row>\n\t\t\t\t<Col lg={2}>\n\t\t\t\t\t<CountryList countries={getCountries(confirmedData)}/>\n\t\t\t\t</Col>\n\t\t\t\t<Col lg={10}>\n\t\t\t\t\t<Navbar className=\"justify-content-between\">\n\t\t\t\t\t\t<Navbar.Brand><h2>{country}</h2></Navbar.Brand>\n\n\t\t\t\t\t\t<Nav className=\"mr-sm-2\">\n\t\t\t\t\t\t\t<Nav.Item>\n\t\t\t\t\t\t\t\t<Nav.Link href=\"/about\">About</Nav.Link>\n\t\t\t\t\t\t\t</Nav.Item>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar>\n\t\t\t\t\t<NumberStatsBar\n\t\t\t\t\t\tconfirmed={getDataFromDate(confirmedData, date, country)}\n\t\t\t\t\t\tactive={getDataFromDate(confirmedData, date, country) - getDataFromDate(deathsData, date, country) - getDataFromDate(recoveredData, date, country)}\n\t\t\t\t\t\tdeaths={getDataFromDate(deathsData, date, country)}\n\t\t\t\t\t\trecovered={getDataFromDate(recoveredData, date, country)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chart data={parseData(confirmedData, deathsData, recoveredData, country)} />\n\t\t\t\t\t<p style={{margin: '30px 0'}}><center>MIT Â© <a href=\"http://dusansimic.me\">DuÅ¡an SimiÄ‡</a></center></p>\n\t\t\t\t\t<p><center><a href=\"/about\">About</a></center></p>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n","import React from 'react';\nimport { Container, Row, Col, Navbar, Nav } from 'react-bootstrap';\n\nexport default function About() {\n\treturn (\n\t\t<div style={{margin: '50px 0', fontSize: '1.2em'}}>\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={2}/>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Navbar>\n\t\t\t\t\t\t\t<Nav.Item>\n\t\t\t\t\t\t\t\t<Nav.Link href=\"/\">{'< Back'}</Nav.Link>\n\t\t\t\t\t\t\t</Nav.Item>\n\t\t\t\t\t\t</Navbar>\n\t\t\t\t\t\t<h3><b>Idea</b></h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThis is a small, \"quick and dirty\", simple, web app that I made. My mom who is a medical specialist wanted to see graphs with numbers of Corona virus patients in each country for the past cuple of weeks. There are some sites where you can get that but not for all countries as I've seen. Since it was good for my mom and me I wanted to share it so anyone can check it out.\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<h3><b>Data source</b></h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tAll of the data You see here is from <a href=\"https://github.com/CSSEGISandData/COVID-19\">this</a> GitHub repository. It's created by Center for Systems Science and Engineering at the Johns Hopkins University. You can see all the information about the data sources on that link.<br/>\n\t\t\t\t\t\t\tThe data is now always up to date because it's updated once at midnight (23:59h) but it's reliable and could be used for relative representation of the Corona virus situation around the world.\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<h3><b>Open source</b></h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThis web app is open source under the MIT license. You can find it on my GitHub <a href=\"https://github.com/dusansimic/covid19-graphs\">repo</a>. I'm open to suggestions and change requests. You can create an Issue on the <a href=\"https://github.com/dusansimic/covid19-graphs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">issue page</a> or if you don't have a GitHub account, just <a href=\"mailto:dusan.simic1810@gmail.com\">email me</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p style={{margin: '30px 0'}}><center>MIT Â© <a href=\"http://dusansimic.me\">DuÅ¡an SimiÄ‡</a></center></p>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col lg={2}/>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport About from './About';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/about'>\n          <About/>\n        </Route>\n        <Route path='/'>\n          <Dashboard/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}